{"version":3,"file":"static/js/321.23f45818.chunk.js","mappings":"kMACA,EAAwC,gDAAxC,EAA8G,8CAA9G,EAA2K,uCAA3K,EAAwO,8CAAxO,EAA4S,8CAA5S,EAAsX,oDAAtX,EAA4hB,kDAA5hB,EAAssB,gDAAtsB,EAAkxB,oD,SCOnwB,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAElB,OAAO,iBAAKC,UAAWC,EAAhB,WACJ,eAAID,UAAWC,EAAf,SAAsC,yBACtC,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAkBhB,OAjBKD,EAAOH,MAGT,2CAA2CK,KAAKF,EAAOH,OAG/CG,EAAOH,MAAMM,OAAQ,IAC9BF,EAAOJ,MAAQ,sDAFfI,EAAOJ,MAAQ,wBAJfI,EAAOJ,MAAQ,WAUbG,EAAOF,SAECE,EAAOF,SAASK,OAAQ,IAClCF,EAAOH,SAAW,sDAFlBG,EAAOH,SAAW,WAKbG,CACR,EACDG,SAAU,SAACJ,EAAD,GAAgC,IAArBK,EAAoB,EAApBA,cAKbC,EAAON,EACbR,GACEe,EAAAA,EAAAA,IAAS,CACLV,MAAOS,EAAKT,MACZC,SAAWQ,EAAKR,YAItBO,GAAc,EAEf,EAtCH,SAwCG,gBACCL,EADD,EACCA,OACAC,EAFD,EAECA,OACAO,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aAPD,OASC,kBAAMR,SAAUO,EAAcjB,UAAWC,EAAzC,WACE,kBAAOkB,QAAQ,QAAQnB,UAAWC,EAAlC,SAAyD,mBACzD,kBACEmB,KAAK,QACLC,KAAK,QACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOlB,EAAOH,MACdH,UAAWC,IAEZM,EAAOJ,OAASW,EAAQX,OAASI,EAAOJ,OACzC,kBAAOgB,QAAQ,WAAWnB,UAAWC,EAArC,SAA4D,cAC5D,kBACEmB,KAAK,WACLC,KAAK,WACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOlB,EAAOF,SACdJ,UAAWC,IAEZM,EAAOH,UAAYU,EAAQV,UAAYG,EAAOH,UAC9C,mBAAOiB,KAAK,gBAAgBrB,UAAWC,EAAvC,WACA,kBAAOmB,KAAK,cACrB,wBAMQ,mBAAQA,KAAK,SAASK,SAAUP,EAAclB,UAAWC,EAAzD,SAAqF,cAtCxF,KA8CH,eAAGD,UAAWC,EAAd,UAAuC,4BACvC,SAAC,KAAD,CAASD,UAAWC,EAA6ByB,GAAE,SAAnD,SAA+D,eAE7C,SAGrB,C","sources":["webpack://Questify/./src/pages/RegisterFormPage/RegisterFormPage.module.css?373b","pages/RegisterFormPage/RegisterFormPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registerForm__section\":\"RegisterFormPage_registerForm__section__pIcWz\",\"registerForm__title\":\"RegisterFormPage_registerForm__title__u6MYe\",\"registerForm\":\"RegisterFormPage_registerForm__-6Klr\",\"registerForm__label\":\"RegisterFormPage_registerForm__label__-0GCA\",\"registerForm__input\":\"RegisterFormPage_registerForm__input__kl0Pe\",\"registerForm__termService\":\"RegisterFormPage_registerForm__termService__KWWyJ\",\"registerForm__termServiceLink\":\"RegisterFormPage_registerForm__termServiceLink__csJEF\",\"registerForm__submitBtn\":\"RegisterFormPage_registerForm__submitBtn__sMupl\",\"registerForm__termServiceCheckbox\":\"RegisterFormPage_registerForm__termServiceCheckbox__0b1eg\",\"registerForm__account\":\"RegisterFormPage_registerForm__account__qP563\",\"registerForm__accountLink\":\"RegisterFormPage_registerForm__accountLink__1xtkT\"};","import { NavLink } from 'react-router-dom';\nimport { Formik } from 'formik';\n\nimport { useDispatch } from 'react-redux'\nimport { register } from \"../../redux/auth/authOperation\";\n\nimport s from './RegisterFormPage.module.css'\n\nexport default function RegisterFormPage(){\n  const dispatch = useDispatch();\n\n return <div className={s.registerForm__section}>\n    <h1 className={s.registerForm__title}>Create your account</h1>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        } else if (values.email.length <3) {\n          errors.email = 'Your password should be at least 3 characters long';\n        }\n\n\n        if(!values.password) {\n          errors.password = 'Required';\n        } else if ( values.password.length <8 ) {\n          errors.password = 'Your password should be at least 8 characters long';\n        }\n\n        return errors;\n      }}\n      onSubmit={(values, { setSubmitting }) => {\n        // setTimeout(() => {\n        //   alert(JSON.stringify(values, null, 2));\n        //   setSubmitting(false);\n        // }, 400);\n        const form = values;\n        dispatch(\n          register({\n              email: form.email,\n              password:  form.password,\n            })\n      );\n\n        setSubmitting(false);\n\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit} className={s.registerForm}>\n          <label htmlFor=\"email\" className={s.registerForm__label}>Email Address</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            className={s.registerForm__input}\n          />\n          {errors.email && touched.email && errors.email}\n          <label htmlFor=\"password\" className={s.registerForm__label}>Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            className={s.registerForm__input}\n          />\n          {errors.password && touched.password && errors.password}\n           <label name=\"acceptedTerms\" className={s.registerForm__termService}>\n           <input type=\"checkbox\"/>\n  <span ></span>\n         {/* <input className={s.registerForm__termServiceCheckbox} type=\"checkbox\" required />\n         I agree all statement in <span className={s.registerForm__termServiceLink}>Term Service </span> */}\n       </label>\n          \n        \n          <button type=\"submit\" disabled={isSubmitting} className={s.registerForm__submitBtn} >\n            Sigh up\n          </button>\n        </form>\n      )}\n    </Formik>\n\n\n    <p className={s.registerForm__account}>Have already an account?\n    <NavLink className={s.registerForm__accountLink} to={`/login`}>\n            Login here\n            </NavLink> </p>\n  </div>\n\n}\n\n"],"names":["RegisterFormPage","dispatch","useDispatch","className","s","initialValues","email","password","validate","values","errors","test","length","onSubmit","setSubmitting","form","register","touched","handleChange","handleBlur","handleSubmit","isSubmitting","htmlFor","type","name","onChange","onBlur","value","disabled","to"],"sourceRoot":""}