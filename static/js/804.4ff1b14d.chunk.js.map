{"version":3,"file":"static/js/804.4ff1b14d.chunk.js","mappings":"kMACA,EAAqC,0CAArC,EAAkG,wCAAlG,EAAgK,2CAAhK,EAAuN,iCAAvN,EAA2Q,wCAA3Q,EAAsU,wCAAtU,EAA2hB,4CAA3hB,EAA4lB,0CAA5lB,EAA+pB,8C,SCMhpB,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAGlB,OAAO,iBAAKC,UAAWC,EAAhB,WACJ,eAAID,UAAWC,EAAf,SAAmC,uCACnC,cAAGD,UAAWC,EAAd,SAAqC,qCACrC,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAchB,OAbKD,EAAOH,MAGT,2CAA2CK,KAAKF,EAAOH,SAExDI,EAAOJ,MAAQ,yBAJfI,EAAOJ,MAAQ,WAMbG,EAAOF,SAECE,EAAOF,SAASK,OAAQ,IAClCF,EAAOH,SAAW,sDAFlBG,EAAOH,SAAW,WAKbG,CACR,EAEDG,SAAU,SAACJ,EAAD,GAAgC,IAArBK,EAAoB,EAApBA,cACbC,EAAON,EACbR,GACEe,EAAAA,EAAAA,IAAM,CACFV,MAAOS,EAAKT,MACZC,SAAWQ,EAAKR,YAGtBO,GAAc,EAEf,EA9BH,SAgCG,gBACCL,EADD,EACCA,OACAC,EAFD,EAECA,OACAO,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aAPD,OASC,kBAAMR,SAAUO,EAAcjB,UAAWC,EAAzC,WACE,kBAAOkB,QAAQ,QAAQnB,UAAWC,EAAlC,SAAsD,mBACtD,kBACEmB,KAAK,QACLC,KAAK,QACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOlB,EAAOH,MACdH,UAAWC,IAEZM,EAAOJ,OAASW,EAAQX,OAASI,EAAOJ,OACzC,kBAAOgB,QAAQ,WAAWnB,UAAWC,EAArC,SAAyD,cACzD,kBACEmB,KAAK,WACLC,KAAK,WACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOlB,EAAOF,SACdJ,UAAWC,IAEZM,EAAOH,UAAYU,EAAQV,UAAYG,EAAOH,UAI/C,mBAAQgB,KAAK,SAASK,SAAUP,EAAclB,UAAWC,EAAzD,SAAiF,aAjCpF,KAyCH,eAAGD,UAAWC,EAAd,UAAoC,+BAE5B,SAAC,KAAD,CAASD,UAAWC,EAA0ByB,GAAE,gBAAhD,SAAmE,iBAM9E,C","sources":["webpack://Questify/./src/pages/LoginFormPage/LoginFormPage.module.css?cbb4","pages/LoginFormPage/LoginFormPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm__section\":\"LoginFormPage_loginForm__section__Ilrds\",\"loginForm__title\":\"LoginFormPage_loginForm__title__ABzDx\",\"loginForm__subTitle\":\"LoginFormPage_loginForm__subTitle__aGqiG\",\"loginForm\":\"LoginFormPage_loginForm__SOLOm\",\"loginForm__label\":\"LoginFormPage_loginForm__label__JKLAq\",\"loginForm__input\":\"LoginFormPage_loginForm__input__Uocie\",\"loginForm__termService\":\"LoginFormPage_loginForm__termService__aBZQX\",\"loginForm__termServiceLink\":\"LoginFormPage_loginForm__termServiceLink__yMbFd\",\"loginForm__submitBtn\":\"LoginFormPage_loginForm__submitBtn__7AUY3\",\"loginForm__account\":\"LoginFormPage_loginForm__account__SEOBR\",\"loginForm__accountLink\":\"LoginFormPage_loginForm__accountLink__03oIF\"};","import { Formik } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux'\nimport { login } from \"../../redux/auth/authOperation\";\n\nimport s from './LoginFormPage.module.css'\n\nexport default function LoginFormPage(){\n  const dispatch = useDispatch();\n\n\n return <div className={s.loginForm__section}>\n    <h1 className={s.loginForm__title}>Hello friend, go to your profile </h1>\n    <p className={s.loginForm__subTitle}>your tasks are waiting for you </p>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        if(!values.password) {\n          errors.password = 'Required';\n        } else if ( values.password.length <8 ) {\n          errors.password = 'Your password should be at least 8 characters long';\n        }\n\n        return errors;\n      }}\n\n      onSubmit={(values, { setSubmitting }) => {\n        const form = values;\n        dispatch(\n          login({\n              email: form.email,\n              password:  form.password,\n            })\n      );\n        setSubmitting(false);\n\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit} className={s.loginForm}>\n          <label htmlFor=\"email\" className={s.loginForm__label}>Email Address</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            className={s.loginForm__input}\n          />\n          {errors.email && touched.email && errors.email}\n          <label htmlFor=\"password\" className={s.loginForm__label}>Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            className={s.loginForm__input}\n          />\n          {errors.password && touched.password && errors.password}\n\n         \n        \n          <button type=\"submit\" disabled={isSubmitting} className={s.loginForm__submitBtn}>\n            Submit\n          </button>\n        </form>\n      )}\n    </Formik>\n\n\n    <p className={s.loginForm__account}> \n      Donâ€™t have an account? \n            <NavLink className={s.loginForm__accountLink} to={`/registration`}>\n              Sign up \n            </NavLink>\n            </p>\n  </div>\n\n}\n\n"],"names":["LoginFormPage","dispatch","useDispatch","className","s","initialValues","email","password","validate","values","errors","test","length","onSubmit","setSubmitting","form","login","touched","handleChange","handleBlur","handleSubmit","isSubmitting","htmlFor","type","name","onChange","onBlur","value","disabled","to"],"sourceRoot":""}