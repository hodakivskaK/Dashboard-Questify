{"version":3,"file":"static/js/321.82388bf8.chunk.js","mappings":"mPACA,G,QAAwC,iDAAxC,EAA8G,8CAA9G,EAAiL,6CAAjL,EAA6O,uCAA7O,EAA0S,8CAA1S,EAA8W,8CAA9W,EAAwb,oDAAxb,EAA6lB,iDAA7lB,EAA4qB,sDAA5qB,EAA4vB,kDAA5vB,EAAs6B,gDAAt6B,EAAk/B,oD,SCSn+B,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAIlB,OAAO,iBAAKC,UAAWC,EAAhB,WACJ,eAAID,UAAWC,EAAf,SAAsC,yBACtC,cAAGD,UAAWC,EAAd,SAAoC,wDACpC,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAkBhB,OAjBKD,EAAOH,MAGT,2CAA2CK,KAAKF,EAAOH,OAG/CG,EAAOH,MAAMM,OAAQ,IAC9BF,EAAOJ,MAAQ,sDAFfI,EAAOJ,MAAQ,wBAJfI,EAAOJ,MAAQ,WAUbG,EAAOF,SAECE,EAAOF,SAASK,OAAQ,IAClCF,EAAOH,SAAW,sDAFlBG,EAAOH,SAAW,WAKbG,CACR,EAEDG,SAAQ,mCAAK,WAAOJ,EAAP,iFAAiBK,UAKT,MAJbC,EAAO,CACXT,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,WAEVD,OAAkC,KAAlBS,EAAKR,SALnB,gCAMSR,GAASiB,EAAAA,EAAAA,IAASD,IAN3B,OAOsB,eADzBE,EANG,QAODC,KAAKC,gBACXC,EAAAA,GAAAA,QAAc,4CACdnB,EAAS,WAES,OAAb,OAAHgB,QAAG,IAAHA,OAAA,EAAAA,EAAKI,SACPD,EAAAA,GAAAA,MAAYH,EAAIK,SAZT,2CAAL,wDAxBV,SA0CG,gBACCb,EADD,EACCA,OACAC,EAFD,EAECA,OACAa,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aAPD,OASC,kBAAMd,SAAUa,EAAcvB,UAAWC,EAAzC,WACE,kBAAOwB,QAAQ,QAAQzB,UAAWC,EAAlC,SAAyD,mBACzD,kBACEyB,KAAK,QACLC,KAAK,QACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOxB,EAAOH,MACdH,UAAWC,IAEZM,EAAOJ,OAASiB,EAAQjB,OAASI,EAAOJ,OACzC,kBAAOsB,QAAQ,WAAWzB,UAAWC,EAArC,SAA4D,cAC5D,kBACEyB,KAAK,WACLC,KAAK,WACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOxB,EAAOF,SACdJ,UAAWC,IAEZM,EAAOH,UAAYgB,EAAQhB,UAAYG,EAAOH,UAC9C,kBAAOuB,KAAK,gBAAgB3B,UAAWC,EAAvC,UAEA,mBAAOwB,QAAQ,WAAWzB,UAAWC,EAArC,WACE,kBAAOyB,KAAK,WAAW1B,UAAWC,IAA2B,+DAShE,mBAAQyB,KAAK,SAASK,SAAUP,EAAcxB,UAAWC,EAAzD,SAAqF,oBA1CxF,KAkDH,eAAGD,UAAWC,EAAd,UAAuC,4BACrC,SAAC,KAAD,CAASD,UAAWC,EAA6B+B,GAAE,SAAnD,SAA+D,iBAMpE,C","sources":["webpack://Questify/./src/pages/RegisterFormPage/RegisterFormPage.module.css?373b","pages/RegisterFormPage/RegisterFormPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registerForm__section\":\"RegisterFormPage_registerForm__section__pIcWz\",\"registerForm__title\":\"RegisterFormPage_registerForm__title__u6MYe\",\"registerForm__info\":\"RegisterFormPage_registerForm__info__1AfYT\",\"registerForm\":\"RegisterFormPage_registerForm__-6Klr\",\"registerForm__label\":\"RegisterFormPage_registerForm__label__-0GCA\",\"registerForm__input\":\"RegisterFormPage_registerForm__input__kl0Pe\",\"registerForm__termService\":\"RegisterFormPage_registerForm__termService__KWWyJ\",\"registerForm__termServiceLink\":\"RegisterFormPage_registerForm__termServiceLink__csJEF\",\"registerForm__checkbox\":\"RegisterFormPage_registerForm__checkbox__rDv8O\",\"registerForm__checkboxLabel\":\"RegisterFormPage_registerForm__checkboxLabel__A4a8F\",\"registerForm__submitBtn\":\"RegisterFormPage_registerForm__submitBtn__sMupl\",\"registerForm__termServiceCheckbox\":\"RegisterFormPage_registerForm__termServiceCheckbox__0b1eg\",\"registerForm__account\":\"RegisterFormPage_registerForm__account__qP563\",\"registerForm__accountLink\":\"RegisterFormPage_registerForm__accountLink__1xtkT\"};","import { NavLink, useNavigate } from 'react-router-dom';\nimport { Formik } from 'formik';\n\nimport { useDispatch } from 'react-redux'\nimport { register } from \"redux/auth/authOperation\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // toast styles\n\nimport s from './RegisterFormPage.module.css'\n\nexport default function RegisterFormPage(){\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n\n return <div className={s.registerForm__section}>\n    <h1 className={s.registerForm__title}>Create your account</h1>\n    <p className={s.registerForm__info}>Please don't use real e-mail, it's a pet project. </p>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        } else if (values.email.length <3) {\n          errors.email = 'Your password should be at least 3 characters long';\n        }\n\n\n        if(!values.password) {\n          errors.password = 'Required';\n        } else if ( values.password.length <8 ) {\n          errors.password = 'Your password should be at least 8 characters long';\n        }\n\n        return errors;\n      }}\n\n      onSubmit = { async (values, { resetForm }) => {\n        const user = {\n          email: values.email,\n          password: values.password,\n        };\n        if (user.email !== '' && user.password !== '') {\n          const res = await dispatch(register(user));\n          if (res.meta.requestStatus === \"fulfilled\") {\n            toast.success('Successful registration! Please confirm!');\n            navigate('/login');\n          }\n          if (res?.status !== 201) {\n            toast.error(res.payload);\n          }\n        }\n      }}\n    >\n\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit} className={s.registerForm}>\n          <label htmlFor=\"email\" className={s.registerForm__label}>Email Address</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            className={s.registerForm__input}\n          />\n          {errors.email && touched.email && errors.email}\n          <label htmlFor=\"password\" className={s.registerForm__label}>Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            className={s.registerForm__input}\n          />\n          {errors.password && touched.password && errors.password}\n           <label name=\"acceptedTerms\" className={s.registerForm__termService}>\n          \n           <label htmlFor=\"checkbox\" className={s.registerForm__checkboxLabel}>\n             <input type=\"checkbox\" className={s.registerForm__checkbox}/>\n              By checking this box, you agree check my portfolio  :)\n           </label>\n         \n       </label>\n          \n       {/* <NavLink type=\"submit\" disabled={isSubmitting}  className={s.registerForm__submitBtn}  to=\"/login\">\n              Сontinue\n        </NavLink> */}\n          <button type=\"submit\" disabled={isSubmitting} className={s.registerForm__submitBtn} >\n            Сontinue\n          </button>\n        </form>\n      )}\n    </Formik>\n\n\n    <p className={s.registerForm__account}>Already have an account? \n      <NavLink className={s.registerForm__accountLink} to={`/login`}>\n      Sign in\n      </NavLink> \n    </p>\n  </div>\n\n}\n\n"],"names":["RegisterFormPage","dispatch","useDispatch","navigate","useNavigate","className","s","initialValues","email","password","validate","values","errors","test","length","onSubmit","resetForm","user","register","res","meta","requestStatus","toast","status","payload","touched","handleChange","handleBlur","handleSubmit","isSubmitting","htmlFor","type","name","onChange","onBlur","value","disabled","to"],"sourceRoot":""}