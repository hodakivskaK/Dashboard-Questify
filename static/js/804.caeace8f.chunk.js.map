{"version":3,"file":"static/js/804.caeace8f.chunk.js","mappings":"yOACA,G,QAAkC,wCAAlC,EAA2I,0CAA3I,EAAwM,wCAAxM,EAAsQ,2CAAtQ,EAA6T,iCAA7T,EAAiX,wCAAjX,EAA4a,wCAA5a,EAAioB,4CAAjoB,EAAksB,0CAAlsB,EAAqwB,8C,SCQtvB,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAGlB,OAAO,gBAAKC,UAAWC,EAAhB,UACJ,iBAAKD,UAAWC,EAAhB,WACA,eAAID,UAAWC,EAAf,SAAmC,sCACnC,cAAGD,UAAWC,EAAd,SAAqC,qCACrC,SAAC,KAAD,CACEC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAU,SAAAC,GACR,IAAMC,EAAS,CAAC,EAchB,OAbKD,EAAOH,MAGT,2CAA2CK,KAAKF,EAAOH,SAExDI,EAAOJ,MAAQ,yBAJfI,EAAOJ,MAAQ,WAMbG,EAAOF,SAECE,EAAOF,SAASK,OAAQ,IAClCF,EAAOH,SAAW,sDAFlBG,EAAOH,SAAW,WAKbG,CACR,EAEDG,SAAQ,mCAAK,WAAOJ,EAAP,iFAAiBK,UAKT,MAJbC,EAAO,CACXT,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,WAEVD,OAAkC,KAAlBS,EAAKR,SALnB,gCAMSN,GAASe,EAAAA,EAAAA,IAAMD,IANxB,OAOsB,eADzBE,EANG,QAODC,KAAKC,eACXC,EAAAA,GAAAA,QAAc,eAEI,OAAb,OAAHH,QAAG,IAAHA,OAAA,EAAAA,EAAKI,SACPD,EAAAA,GAAAA,MAAYH,EAAIK,SAXT,2CAAL,wDApBV,SAqCG,gBACCb,EADD,EACCA,OACAC,EAFD,EAECA,OACAa,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WACAC,EAND,EAMCA,aACAC,EAPD,EAOCA,aAPD,OASC,kBAAMd,SAAUa,EAAcvB,UAAWC,EAAzC,WACE,kBAAOwB,QAAQ,QAAQzB,UAAWC,EAAlC,SAAsD,mBACtD,kBACEyB,KAAK,QACLC,KAAK,QACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOxB,EAAOH,MACdH,UAAWC,IAEZM,EAAOJ,OAASiB,EAAQjB,OAASI,EAAOJ,OACzC,kBAAOsB,QAAQ,WAAWzB,UAAWC,EAArC,SAAyD,cACzD,kBACEyB,KAAK,WACLC,KAAK,WACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAOxB,EAAOF,SACdJ,UAAWC,IAEZM,EAAOH,UAAYgB,EAAQhB,UAAYG,EAAOH,UAI/C,mBAAQsB,KAAK,SAASK,SAAUP,EAAcxB,UAAWC,EAAzD,SAAiF,aAjCpF,KAyCH,eAAGD,UAAWC,EAAd,UAAoC,+BAE5B,SAAC,KAAD,CAASD,UAAWC,EAA0B+B,GAAE,gBAAhD,SAAmE,mBAM9E,C","sources":["webpack://Questify/./src/pages/LoginFormPage/LoginFormPage.module.css?cbb4","pages/LoginFormPage/LoginFormPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm__page\":\"LoginFormPage_loginForm__page__YMw02\",\"bg-moving\":\"LoginFormPage_bg-moving__LKb88\",\"loginForm__section\":\"LoginFormPage_loginForm__section__Ilrds\",\"loginForm__title\":\"LoginFormPage_loginForm__title__ABzDx\",\"loginForm__subTitle\":\"LoginFormPage_loginForm__subTitle__aGqiG\",\"loginForm\":\"LoginFormPage_loginForm__SOLOm\",\"loginForm__label\":\"LoginFormPage_loginForm__label__JKLAq\",\"loginForm__input\":\"LoginFormPage_loginForm__input__Uocie\",\"loginForm__termService\":\"LoginFormPage_loginForm__termService__aBZQX\",\"loginForm__termServiceLink\":\"LoginFormPage_loginForm__termServiceLink__yMbFd\",\"loginForm__submitBtn\":\"LoginFormPage_loginForm__submitBtn__7AUY3\",\"loginForm__account\":\"LoginFormPage_loginForm__account__SEOBR\",\"loginForm__accountLink\":\"LoginFormPage_loginForm__accountLink__03oIF\"};","import { Formik } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux'\nimport { login } from \"../../redux/auth/authOperation\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // toast styles\n\nimport s from './LoginFormPage.module.css'\n\nexport default function LoginFormPage(){\n  const dispatch = useDispatch();\n\n\n return <div className={s.loginForm__page}>\n    <div className={s.loginForm__section}>\n    <h1 className={s.loginForm__title}>Hello friend, go to your profile</h1>\n    <p className={s.loginForm__subTitle}>your tasks are waiting for you </p>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        if(!values.password) {\n          errors.password = 'Required';\n        } else if ( values.password.length <8 ) {\n          errors.password = 'Your password should be at least 8 characters long';\n        }\n\n        return errors;\n      }}\n\n      onSubmit = { async (values, { resetForm }) => {\n        const user = {\n          email: values.email,\n          password: values.password,\n        };\n        if (user.email !== '' && user.password !== '') {\n          const res = await dispatch(login(user));\n          if (res.meta.requestStatus === \"fulfilled\") {\n            toast.success('Successful!');\n          }\n          if (res?.status !== 201) {\n            toast.error(res.payload);\n          }\n        }\n      }}\n    >\n      \n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit} className={s.loginForm}>\n          <label htmlFor=\"email\" className={s.loginForm__label}>Email Address</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            className={s.loginForm__input}\n          />\n          {errors.email && touched.email && errors.email}\n          <label htmlFor=\"password\" className={s.loginForm__label}>Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            className={s.loginForm__input}\n          />\n          {errors.password && touched.password && errors.password}\n\n         \n        \n          <button type=\"submit\" disabled={isSubmitting} className={s.loginForm__submitBtn}>\n            Submit\n          </button>\n        </form>\n      )}\n    </Formik>\n\n\n    <p className={s.loginForm__account}> \n      Donâ€™t have an account? \n            <NavLink className={s.loginForm__accountLink} to={`/registration`}>\n              Sign up \n            </NavLink>\n            </p>\n  </div>\n  </div>\n}\n\n"],"names":["LoginFormPage","dispatch","useDispatch","className","s","initialValues","email","password","validate","values","errors","test","length","onSubmit","resetForm","user","login","res","meta","requestStatus","toast","status","payload","touched","handleChange","handleBlur","handleSubmit","isSubmitting","htmlFor","type","name","onChange","onBlur","value","disabled","to"],"sourceRoot":""}