{"version":3,"file":"static/js/832.48c42e3b.chunk.js","mappings":"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","sources":["webpack://Questify/./src/pages/RegisterFormPage/RegisterFormPage.module.css?373b","pages/RegisterFormPage/RegisterFormPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registerForm__page\":\"RegisterFormPage_registerForm__page__SORJ8\",\"bg-moving\":\"RegisterFormPage_bg-moving__onaEl\",\"registerForm__section\":\"RegisterFormPage_registerForm__section__pIcWz\",\"registerForm__title\":\"RegisterFormPage_registerForm__title__u6MYe\",\"registerForm__info\":\"RegisterFormPage_registerForm__info__1AfYT\",\"registerForm\":\"RegisterFormPage_registerForm__-6Klr\",\"registerForm__label\":\"RegisterFormPage_registerForm__label__-0GCA\",\"registerForm__input\":\"RegisterFormPage_registerForm__input__kl0Pe\",\"registerForm__termService\":\"RegisterFormPage_registerForm__termService__KWWyJ\",\"registerForm__termServiceLink\":\"RegisterFormPage_registerForm__termServiceLink__csJEF\",\"registerForm__checkbox\":\"RegisterFormPage_registerForm__checkbox__rDv8O\",\"registerForm__checkboxLabel\":\"RegisterFormPage_registerForm__checkboxLabel__A4a8F\",\"registerForm__submitBtn\":\"RegisterFormPage_registerForm__submitBtn__sMupl\",\"registerForm__termServiceCheckbox\":\"RegisterFormPage_registerForm__termServiceCheckbox__0b1eg\",\"registerForm__account\":\"RegisterFormPage_registerForm__account__qP563\",\"registerForm__accountLink\":\"RegisterFormPage_registerForm__accountLink__1xtkT\"};","import { NavLink, useNavigate } from 'react-router-dom';\nimport { Formik } from 'formik';\n\nimport { useDispatch } from 'react-redux'\nimport { register } from \"redux/auth/authOperation\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // toast styles\n\n\nimport s from './RegisterFormPage.module.css'\n\nexport default function RegisterFormPage(){\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n\n\n return <div className={s.registerForm__page}> \n      <div className={s.registerForm__section}>\n    <h1 className={s.registerForm__title}>Create your account</h1>\n    <p className={s.registerForm__info}>Please don't use real e-mail, it's a pet project. </p>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        } else if (values.email.length <3) {\n          errors.email = 'Your password should be at least 3 characters long';\n        }\n\n\n        if(!values.password) {\n          errors.password = 'Required';\n        } else if ( values.password.length <8 ) {\n          errors.password = 'Your password should be at least 8 characters long';\n        }\n\n        return errors;\n      }}\n\n      onSubmit = { async (values, { resetForm }) => {\n        const user = {\n          email: values.email,\n          password: values.password,\n        };\n        if (user.email !== '' && user.password !== '') {\n          const res = await dispatch(register(user));\n          if (res.meta.requestStatus === \"fulfilled\") {\n            toast.success('Successful registration! Please confirm!');\n            navigate('/login');\n          }\n          if (res?.status !== 201) {\n            toast.error(res.payload);\n          }\n        }\n      }}\n    >\n\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit} className={s.registerForm} autoComplete=\"off\">\n          <label htmlFor=\"email\" className={s.registerForm__label}>Email Address</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            className={s.registerForm__input}\n           \n          />\n          {errors.email && touched.email && errors.email}\n          <label htmlFor=\"password\" className={s.registerForm__label}>Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            className={s.registerForm__input}\n          />\n          {errors.password && touched.password && errors.password}\n           <label name=\"acceptedTerms\" className={s.registerForm__termService}>\n          \n           <label htmlFor=\"checkbox\" className={s.registerForm__checkboxLabel}>\n             <input type=\"checkbox\" className={s.registerForm__checkbox}/>\n              By checking this box, you agree check my portfolio  :)\n           </label>\n         \n       </label>\n    \n          <button type=\"submit\" disabled={isSubmitting} className={s.registerForm__submitBtn} >\n            Ð¡ontinue\n          </button>\n        </form>\n      )}\n    </Formik>\n\n\n    <p className={s.registerForm__account}>Already have an account? \n      <NavLink className={s.registerForm__accountLink} to={`/login`}>\n      Sign in\n      </NavLink> \n    </p>\n  </div>\n  </div>\n}\n\n"],"names":["RegisterFormPage","dispatch","useDispatch","navigate","useNavigate","_jsx","className","s","children","_jsxs","Formik","initialValues","email","password","validate","values","errors","test","length","onSubmit","async","_ref","resetForm","user","res","register","meta","requestStatus","toast","status","payload","_ref2","touched","handleChange","handleBlur","handleSubmit","isSubmitting","autoComplete","htmlFor","type","name","onChange","onBlur","value","disabled","NavLink","to"],"sourceRoot":""}