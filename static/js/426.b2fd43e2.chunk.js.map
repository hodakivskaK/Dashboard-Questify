{"version":3,"file":"static/js/426.b2fd43e2.chunk.js","mappings":"+LACA,SAAgB,gBAAkB,uCAAuC,YAAY,iCAAiC,mBAAqB,0CAA0C,iBAAmB,wCAAwC,oBAAsB,2CAA2C,UAAY,iCAAiC,iBAAmB,wCAAwC,iBAAmB,wCAAwC,uBAAyB,8CAA8C,2BAA6B,kDAAkD,qBAAuB,4CAA4C,mBAAqB,0CAA0C,uBAAyB,+C,aCQtvB,SAASA,IACtB,MAAMC,GAAWC,EAAAA,EAAAA,MAGlB,OAAOC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAAA,gBAAkBC,UACtCC,EAAAA,EAAAA,MAAA,OAAKH,UAAWC,EAAAA,mBAAqBC,SAAA,EACrCH,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAAA,iBAAmBC,SAAC,sCACnCH,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAAA,oBAAsBC,SAAC,qCACrCH,EAAAA,EAAAA,KAACK,EAAAA,GAAM,CACLC,cAAe,CAAEC,MAAO,GAAIC,SAAU,IACtCC,SAAUC,IACR,MAAMC,EAAS,CAAC,EAchB,OAbKD,EAAOH,MAGT,2CAA2CK,KAAKF,EAAOH,SAExDI,EAAOJ,MAAQ,yBAJfI,EAAOJ,MAAQ,WAMbG,EAAOF,SAECE,EAAOF,SAASK,OAAQ,IAClCF,EAAOH,SAAW,sDAFlBG,EAAOH,SAAW,WAKbG,CAAM,EAGfG,SAAaC,MAAOL,EAAMM,KAAqB,IAAnB,UAAEC,GAAWD,EACvC,MAAME,EAAO,CACXX,MAAOG,EAAOH,MACdC,SAAUE,EAAOF,UAEnB,GAAmB,KAAfU,EAAKX,OAAkC,KAAlBW,EAAKV,SAAiB,CAC7C,MAAMW,QAAYrB,GAASsB,EAAAA,EAAAA,IAAMF,IACF,cAA3BC,EAAIE,KAAKC,eACXC,EAAAA,GAAAA,QAAc,eAEI,OAAb,OAAHJ,QAAG,IAAHA,OAAG,EAAHA,EAAKK,SACPD,EAAAA,GAAAA,MAAYJ,EAAIM,QAEpB,GACAtB,SAGDuB,IAAA,IAAC,OACAhB,EAAM,OACNC,EAAM,QACNgB,EAAO,aACPC,EAAY,WACZC,EAAU,aACVC,EAAY,aACZC,GACDL,EAAA,OACCtB,EAAAA,EAAAA,MAAA,QAAMU,SAAUgB,EAAc7B,UAAWC,EAAAA,UAAYC,SAAA,EACnDH,EAAAA,EAAAA,KAAA,SAAOgC,QAAQ,QAAQ/B,UAAWC,EAAAA,iBAAmBC,SAAC,mBACtDH,EAAAA,EAAAA,KAAA,SACEiC,KAAK,QACLC,KAAK,QACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAO3B,EAAOH,MACdN,UAAWC,EAAAA,mBAEZS,EAAOJ,OAASoB,EAAQpB,OAASI,EAAOJ,OACzCP,EAAAA,EAAAA,KAAA,SAAOgC,QAAQ,WAAW/B,UAAWC,EAAAA,iBAAmBC,SAAC,cACzDH,EAAAA,EAAAA,KAAA,SACEiC,KAAK,WACLC,KAAK,WACLC,SAAUP,EACVQ,OAAQP,EACRQ,MAAO3B,EAAOF,SACdP,UAAWC,EAAAA,mBAEZS,EAAOH,UAAYmB,EAAQnB,UAAYG,EAAOH,UAI/CR,EAAAA,EAAAA,KAAA,UAAQiC,KAAK,SAASK,SAAUP,EAAc9B,UAAWC,EAAAA,qBAAuBC,SAAC,aAG5E,KAKXC,EAAAA,EAAAA,MAAA,KAAGH,UAAWC,EAAAA,mBAAqBC,SAAA,CAAC,+BAE5BH,EAAAA,EAAAA,KAACuC,EAAAA,GAAO,CAACtC,UAAWC,EAAAA,uBAA0BsC,GAAE,gBAAkBrC,SAAC,mBAM/E,C","sources":["webpack://Questify/./src/pages/LoginFormPage/LoginFormPage.module.css?cbb4","pages/LoginFormPage/LoginFormPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginForm__page\":\"LoginFormPage_loginForm__page__YMw02\",\"bg-moving\":\"LoginFormPage_bg-moving__LKb88\",\"loginForm__section\":\"LoginFormPage_loginForm__section__Ilrds\",\"loginForm__title\":\"LoginFormPage_loginForm__title__ABzDx\",\"loginForm__subTitle\":\"LoginFormPage_loginForm__subTitle__aGqiG\",\"loginForm\":\"LoginFormPage_loginForm__SOLOm\",\"loginForm__label\":\"LoginFormPage_loginForm__label__JKLAq\",\"loginForm__input\":\"LoginFormPage_loginForm__input__Uocie\",\"loginForm__termService\":\"LoginFormPage_loginForm__termService__aBZQX\",\"loginForm__termServiceLink\":\"LoginFormPage_loginForm__termServiceLink__yMbFd\",\"loginForm__submitBtn\":\"LoginFormPage_loginForm__submitBtn__7AUY3\",\"loginForm__account\":\"LoginFormPage_loginForm__account__SEOBR\",\"loginForm__accountLink\":\"LoginFormPage_loginForm__accountLink__03oIF\"};","import { Formik } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch } from 'react-redux'\nimport { login } from \"../../redux/auth/authOperation\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css'; // toast styles\n\nimport s from './LoginFormPage.module.css'\n\nexport default function LoginFormPage(){\n  const dispatch = useDispatch();\n\n\n return <div className={s.loginForm__page}>\n    <div className={s.loginForm__section}>\n    <h1 className={s.loginForm__title}>Hello friend, go to your profile</h1>\n    <p className={s.loginForm__subTitle}>your tasks are waiting for you </p>\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        if(!values.password) {\n          errors.password = 'Required';\n        } else if ( values.password.length <8 ) {\n          errors.password = 'Your password should be at least 8 characters long';\n        }\n\n        return errors;\n      }}\n\n      onSubmit = { async (values, { resetForm }) => {\n        const user = {\n          email: values.email,\n          password: values.password,\n        };\n        if (user.email !== '' && user.password !== '') {\n          const res = await dispatch(login(user));\n          if (res.meta.requestStatus === \"fulfilled\") {\n            toast.success('Successful!');\n          }\n          if (res?.status !== 201) {\n            toast.error(res.payload);\n          }\n        }\n      }}\n    >\n      \n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit} className={s.loginForm}>\n          <label htmlFor=\"email\" className={s.loginForm__label}>Email Address</label>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            className={s.loginForm__input}\n          />\n          {errors.email && touched.email && errors.email}\n          <label htmlFor=\"password\" className={s.loginForm__label}>Password</label>\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n            className={s.loginForm__input}\n          />\n          {errors.password && touched.password && errors.password}\n\n         \n        \n          <button type=\"submit\" disabled={isSubmitting} className={s.loginForm__submitBtn}>\n            Submit\n          </button>\n        </form>\n      )}\n    </Formik>\n\n\n    <p className={s.loginForm__account}> \n      Donâ€™t have an account? \n            <NavLink className={s.loginForm__accountLink} to={`/registration`}>\n              Sign up \n            </NavLink>\n            </p>\n  </div>\n  </div>\n}\n\n"],"names":["LoginFormPage","dispatch","useDispatch","_jsx","className","s","children","_jsxs","Formik","initialValues","email","password","validate","values","errors","test","length","onSubmit","async","_ref","resetForm","user","res","login","meta","requestStatus","toast","status","payload","_ref2","touched","handleChange","handleBlur","handleSubmit","isSubmitting","htmlFor","type","name","onChange","onBlur","value","disabled","NavLink","to"],"sourceRoot":""}